// -------------------------------------------------------------
//
// Module: halfBandFirst
// Generated by MATLAB(R) 23.2 and Filter Design HDL Coder 23.2.
// Generated on: 2024-05-01 21:15:39
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: D:\fax\zavrsni\halfBandFirst
// AddPipelineRegisters: on
// Name: halfBandFirst
// TargetLanguage: Verilog
// TestBenchName: halfBandFirst_tb
// TestBenchStimulus: step chirp 
// LoopUnrolling: on

// Filter Specifications:
//
// Sample Rate          : 88.2 kHz
// Response             : Halfband
// Specification        : N,TW
// Interpolation Factor : 2
// Multirate Type       : Interpolator
// Type                 : Lowpass
// Filter Order         : 130
// Transition Width     : 4.1 kHz
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure      : Direct-Form FIR Polyphase Interpolator
// Interpolation Factor  : 2
// Polyphase Length      : 66
// Filter Length         : 131
// Stable                : Yes
// Linear Phase          : Yes (Type 1)
//
// Arithmetic            : fixed
// Numerator             : s22,20 -> [-2 2)
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module halfBandFirst
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [20:0] filter_out; //sfix21_En15
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: halfBandFirst
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [21:0] coeffphase1_34 = 22'b0010100010110011111000; //sfix22_En20
  parameter signed [21:0] coeffphase1_35 = 22'b1111001010001010100111; //sfix22_En20
  parameter signed [21:0] coeffphase1_36 = 22'b0000011111110010001000; //sfix22_En20
  parameter signed [21:0] coeffphase1_37 = 22'b1111101001110101111001; //sfix22_En20
  parameter signed [21:0] coeffphase1_38 = 22'b0000010000101011110000; //sfix22_En20
  parameter signed [21:0] coeffphase1_39 = 22'b1111110010111001001111; //sfix22_En20
  parameter signed [21:0] coeffphase1_40 = 22'b0000001010100011101110; //sfix22_En20
  parameter signed [21:0] coeffphase1_41 = 22'b1111110111010111001001; //sfix22_En20
  parameter signed [21:0] coeffphase1_42 = 22'b0000000111001000100011; //sfix22_En20
  parameter signed [21:0] coeffphase1_43 = 22'b1111111010000101000011; //sfix22_En20
  parameter signed [21:0] coeffphase1_44 = 22'b0000000100111011001101; //sfix22_En20
  parameter signed [21:0] coeffphase1_45 = 22'b1111111011111001110111; //sfix22_En20
  parameter signed [21:0] coeffphase1_46 = 22'b0000000011011001100101; //sfix22_En20
  parameter signed [21:0] coeffphase1_47 = 22'b1111111101001100000011; //sfix22_En20
  parameter signed [21:0] coeffphase1_48 = 22'b0000000010010100001001; //sfix22_En20
  parameter signed [21:0] coeffphase1_49 = 22'b1111111110000110110010; //sfix22_En20
  parameter signed [21:0] coeffphase1_50 = 22'b0000000001100010100000; //sfix22_En20
  parameter signed [21:0] coeffphase1_51 = 22'b1111111110110000100111; //sfix22_En20
  parameter signed [21:0] coeffphase1_52 = 22'b0000000000111111011010; //sfix22_En20
  parameter signed [21:0] coeffphase1_53 = 22'b1111111111001101111000; //sfix22_En20
  parameter signed [21:0] coeffphase1_54 = 22'b0000000000100111001011; //sfix22_En20
  parameter signed [21:0] coeffphase1_55 = 22'b1111111111100001110010; //sfix22_En20
  parameter signed [21:0] coeffphase1_56 = 22'b0000000000010110111110; //sfix22_En20
  parameter signed [21:0] coeffphase1_57 = 22'b1111111111101110110100; //sfix22_En20
  parameter signed [21:0] coeffphase1_58 = 22'b0000000000001100101000; //sfix22_En20
  parameter signed [21:0] coeffphase1_59 = 22'b1111111111110110111011; //sfix22_En20
  parameter signed [21:0] coeffphase1_60 = 22'b0000000000000110011000; //sfix22_En20
  parameter signed [21:0] coeffphase1_61 = 22'b1111111111111011101010; //sfix22_En20
  parameter signed [21:0] coeffphase1_62 = 22'b0000000000000010110111; //sfix22_En20
  parameter signed [21:0] coeffphase1_63 = 22'b1111111111111110001101; //sfix22_En20
  parameter signed [21:0] coeffphase1_64 = 22'b0000000000000001000101; //sfix22_En20
  parameter signed [21:0] coeffphase1_65 = 22'b1111111111111111011010; //sfix22_En20
  parameter signed [21:0] coeffphase1_66 = 22'b0000000000000000010110; //sfix22_En20
  
  parameter signed [21:0] coeffphase2_33 = 22'b0100000000000000000000; //sfix22_En20
 

  // Signals
   reg  [1:0] cur_count; // ufix2
   wire phase_1; // boolean
   reg  signed [15:0] delay_pipeline [0:65] ; // sfix16_En15
 
   wire signed [38:0] product; // sfix38_En35
   wire signed [38:0] product_1; // sfix38_En35
   wire signed [38:0] product_2; // sfix38_En35
   wire signed [38:0] product_3; // sfix38_En35
   wire signed [38:0] product_4; // sfix38_En35
   wire signed [38:0] product_5; // sfix38_En35
   wire signed [38:0] product_6; // sfix38_En35
   wire signed [38:0] product_7; // sfix38_En35
   wire signed [38:0] product_8; // sfix38_En35
   wire signed [38:0] product_9; // sfix38_En35
   wire signed [38:0] product_10; // sfix38_En35
   wire signed [38:0] product_11; // sfix38_En35
   wire signed [38:0] product_12; // sfix38_En35
   wire signed [38:0] product_13; // sfix38_En35
   wire signed [38:0] product_14; // sfix38_En35
   wire signed [38:0] product_15; // sfix38_En35
   wire signed [38:0] product_16; // sfix38_En35
   wire signed [38:0] product_17; // sfix38_En35
   wire signed [38:0] product_18; // sfix38_En35
   wire signed [38:0] product_19; // sfix38_En35
   wire signed [38:0] product_20; // sfix38_En35
   wire signed [38:0] product_21; // sfix38_En35
   wire signed [38:0] product_22; // sfix38_En35
   wire signed [38:0] product_23; // sfix38_En35
   wire signed [38:0] product_24; // sfix38_En35
   wire signed [38:0] product_25; // sfix38_En35
   wire signed [38:0] product_26; // sfix38_En35
   wire signed [38:0] product_27; // sfix38_En35
   wire signed [38:0] product_28; // sfix38_En35
   wire signed [38:0] product_29; // sfix38_En35
   wire signed [38:0] product_30; // sfix38_En35
   wire signed [38:0] product_31; // sfix38_En35
   wire signed [38:0] product_32; // sfix38_En35


   wire signed [44:0] sumvector1 [0:32] ; // sfix45_En35
   wire signed [16:0] add_temp; // sfix39_En35
   wire signed [16:0] add_temp_1; // sfix39_En35
   wire signed [16:0] add_temp_2; // sfix39_En35
   wire signed [16:0] add_temp_3; // sfix39_En35
   wire signed [16:0] add_temp_4; // sfix39_En35
   wire signed [16:0] add_temp_5; // sfix39_En35
   wire signed [16:0] add_temp_6; // sfix39_En35
   wire signed [16:0] add_temp_7; // sfix39_En35
   wire signed [16:0] add_temp_8; // sfix39_En35
   wire signed [16:0] add_temp_9; // sfix39_En35
   wire signed [16:0] add_temp_10; // sfix39_En35
   wire signed [16:0] add_temp_11; // sfix39_En35
   wire signed [16:0] add_temp_12; // sfix39_En35
   wire signed [16:0] add_temp_13; // sfix39_En35
   wire signed [16:0] add_temp_14; // sfix39_En35
   wire signed [16:0] add_temp_15; // sfix39_En35
   wire signed [16:0] add_temp_16; // sfix39_En35
   wire signed [16:0] add_temp_17; // sfix39_En35
   wire signed [16:0] add_temp_18; // sfix39_En35
   wire signed [16:0] add_temp_19; // sfix39_En35
   wire signed [16:0] add_temp_20; // sfix39_En35
   wire signed [16:0] add_temp_21; // sfix39_En35
   wire signed [16:0] add_temp_22; // sfix39_En35
   wire signed [16:0] add_temp_23; // sfix39_En35
   wire signed [16:0] add_temp_24; // sfix39_En35
   wire signed [16:0] add_temp_25; // sfix39_En35
   wire signed [16:0] add_temp_26; // sfix39_En35
   wire signed [16:0] add_temp_27; // sfix39_En35
   wire signed [16:0] add_temp_28; // sfix39_En35
   wire signed [16:0] add_temp_29; // sfix39_En35
   wire signed [16:0] add_temp_30; // sfix39_En35
   wire signed [16:0] add_temp_31; // sfix39_En35
   wire signed [16:0] add_temp_32; // sfix39_En35

  
  
  reg  signed [44:0] sumdelay_pipeline1 [0:32] ; // sfix45_En35
  wire signed [44:0] sumvector2 [0:16] ; // sfix45_En35
  wire signed [44:0] add_signext_66; // sfix45_En35
  wire signed [44:0] add_signext_67; // sfix45_En35
  wire signed [45:0] add_temp_33; // sfix46_En35
  wire signed [44:0] add_signext_68; // sfix45_En35
  wire signed [44:0] add_signext_69; // sfix45_En35
  wire signed [45:0] add_temp_34; // sfix46_En35
  wire signed [44:0] add_signext_70; // sfix45_En35
  wire signed [44:0] add_signext_71; // sfix45_En35
  wire signed [45:0] add_temp_35; // sfix46_En35
  wire signed [44:0] add_signext_72; // sfix45_En35
  wire signed [44:0] add_signext_73; // sfix45_En35
  wire signed [45:0] add_temp_36; // sfix46_En35
  wire signed [44:0] add_signext_74; // sfix45_En35
  wire signed [44:0] add_signext_75; // sfix45_En35
  wire signed [45:0] add_temp_37; // sfix46_En35
  wire signed [44:0] add_signext_76; // sfix45_En35
  wire signed [44:0] add_signext_77; // sfix45_En35
  wire signed [45:0] add_temp_38; // sfix46_En35
  wire signed [44:0] add_signext_78; // sfix45_En35
  wire signed [44:0] add_signext_79; // sfix45_En35
  wire signed [45:0] add_temp_39; // sfix46_En35
  wire signed [44:0] add_signext_80; // sfix45_En35
  wire signed [44:0] add_signext_81; // sfix45_En35
  wire signed [45:0] add_temp_40; // sfix46_En35
  wire signed [44:0] add_signext_82; // sfix45_En35
  wire signed [44:0] add_signext_83; // sfix45_En35
  wire signed [45:0] add_temp_41; // sfix46_En35
  wire signed [44:0] add_signext_84; // sfix45_En35
  wire signed [44:0] add_signext_85; // sfix45_En35
  wire signed [45:0] add_temp_42; // sfix46_En35
  wire signed [44:0] add_signext_86; // sfix45_En35
  wire signed [44:0] add_signext_87; // sfix45_En35
  wire signed [45:0] add_temp_43; // sfix46_En35
  wire signed [44:0] add_signext_88; // sfix45_En35
  wire signed [44:0] add_signext_89; // sfix45_En35
  wire signed [45:0] add_temp_44; // sfix46_En35
  wire signed [44:0] add_signext_90; // sfix45_En35
  wire signed [44:0] add_signext_91; // sfix45_En35
  wire signed [45:0] add_temp_45; // sfix46_En35
  wire signed [44:0] add_signext_92; // sfix45_En35
  wire signed [44:0] add_signext_93; // sfix45_En35
  wire signed [45:0] add_temp_46; // sfix46_En35
  wire signed [44:0] add_signext_94; // sfix45_En35
  wire signed [44:0] add_signext_95; // sfix45_En35
  wire signed [45:0] add_temp_47; // sfix46_En35
  wire signed [44:0] add_signext_96; // sfix45_En35
  wire signed [44:0] add_signext_97; // sfix45_En35
  wire signed [45:0] add_temp_48; // sfix46_En35
  reg  signed [44:0] sumdelay_pipeline2 [0:16] ; // sfix45_En35
  wire signed [44:0] sumvector3 [0:8] ; // sfix45_En35
  wire signed [44:0] add_signext_98; // sfix45_En35
  wire signed [44:0] add_signext_99; // sfix45_En35
  wire signed [45:0] add_temp_49; // sfix46_En35
  wire signed [44:0] add_signext_100; // sfix45_En35
  wire signed [44:0] add_signext_101; // sfix45_En35
  wire signed [45:0] add_temp_50; // sfix46_En35
  wire signed [44:0] add_signext_102; // sfix45_En35
  wire signed [44:0] add_signext_103; // sfix45_En35
  wire signed [45:0] add_temp_51; // sfix46_En35
  wire signed [44:0] add_signext_104; // sfix45_En35
  wire signed [44:0] add_signext_105; // sfix45_En35
  wire signed [45:0] add_temp_52; // sfix46_En35
  wire signed [44:0] add_signext_106; // sfix45_En35
  wire signed [44:0] add_signext_107; // sfix45_En35
  wire signed [45:0] add_temp_53; // sfix46_En35
  wire signed [44:0] add_signext_108; // sfix45_En35
  wire signed [44:0] add_signext_109; // sfix45_En35
  wire signed [45:0] add_temp_54; // sfix46_En35
  wire signed [44:0] add_signext_110; // sfix45_En35
  wire signed [44:0] add_signext_111; // sfix45_En35
  wire signed [45:0] add_temp_55; // sfix46_En35
  wire signed [44:0] add_signext_112; // sfix45_En35
  wire signed [44:0] add_signext_113; // sfix45_En35
  wire signed [45:0] add_temp_56; // sfix46_En35
  reg  signed [44:0] sumdelay_pipeline3 [0:8] ; // sfix45_En35
  wire signed [44:0] sumvector4 [0:4] ; // sfix45_En35
  wire signed [44:0] add_signext_114; // sfix45_En35
  wire signed [44:0] add_signext_115; // sfix45_En35
  wire signed [45:0] add_temp_57; // sfix46_En35
  wire signed [44:0] add_signext_116; // sfix45_En35
  wire signed [44:0] add_signext_117; // sfix45_En35
  wire signed [45:0] add_temp_58; // sfix46_En35
  wire signed [44:0] add_signext_118; // sfix45_En35
  wire signed [44:0] add_signext_119; // sfix45_En35
  wire signed [45:0] add_temp_59; // sfix46_En35
  wire signed [44:0] add_signext_120; // sfix45_En35
  wire signed [44:0] add_signext_121; // sfix45_En35
  wire signed [45:0] add_temp_60; // sfix46_En35
  reg  signed [44:0] sumdelay_pipeline4 [0:4] ; // sfix45_En35
  wire signed [44:0] sumvector5 [0:2] ; // sfix45_En35
  wire signed [44:0] add_signext_122; // sfix45_En35
  wire signed [44:0] add_signext_123; // sfix45_En35
  wire signed [45:0] add_temp_61; // sfix46_En35
  wire signed [44:0] add_signext_124; // sfix45_En35
  wire signed [44:0] add_signext_125; // sfix45_En35
  wire signed [45:0] add_temp_62; // sfix46_En35
  reg  signed [44:0] sumdelay_pipeline5 [0:2] ; // sfix45_En35
  wire signed [44:0] sumvector6 [0:1] ; // sfix45_En35
  wire signed [44:0] add_signext_126; // sfix45_En35
  wire signed [44:0] add_signext_127; // sfix45_En35
  wire signed [45:0] add_temp_63; // sfix46_En35
  reg  signed [44:0] sumdelay_pipeline6 [0:1] ; // sfix45_En35
  wire signed [44:0] sum7; // sfix45_En35
  wire signed [44:0] add_signext_128; // sfix45_En35
  wire signed [44:0] add_signext_129; // sfix45_En35
  wire signed [45:0] add_temp_64; // sfix46_En35
  wire signed [20:0] output_typeconvert; // sfix21_En15
  reg  signed [20:0] output_register; // sfix21_En15

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 2'b00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 2'b01) begin
            cur_count <= 2'b00;
          end
          else begin
            cur_count <= cur_count + 2'b01;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 2'b01 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  //   ---------------- Delay Registers ----------------

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
        delay_pipeline[61] <= 0;
        delay_pipeline[62] <= 0;
        delay_pipeline[63] <= 0;
        delay_pipeline[64] <= 0;
        delay_pipeline[65] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
        end
      end
    end // Delay_Pipeline_process


   assign add_temp = delay_pipeline[0] + delay_pipeline[65];
   assign add_temp_1 = delay_pipeline[1] + delay_pipeline[64];
   assign add_temp_2 = delay_pipeline[2] + delay_pipeline[63];
   assign add_temp_3 = delay_pipeline[3] + delay_pipeline[62];
   assign add_temp_4 = delay_pipeline[4] + delay_pipeline[61];
   assign add_temp_5 = delay_pipeline[5] + delay_pipeline[60];
   assign add_temp_6 = delay_pipeline[6] + delay_pipeline[59];
   assign add_temp_7 = delay_pipeline[7] + delay_pipeline[58];
   assign add_temp_8  = delay_pipeline[8]  + delay_pipeline[57];
   assign add_temp_9  = delay_pipeline[9]  + delay_pipeline[56];
   assign add_temp_10 = delay_pipeline[10] + delay_pipeline[55];
   assign add_temp_11 = delay_pipeline[11] + delay_pipeline[54];
   assign add_temp_12 = delay_pipeline[12] + delay_pipeline[53];
   assign add_temp_13 = delay_pipeline[13] + delay_pipeline[52];
   assign add_temp_14 = delay_pipeline[14] + delay_pipeline[51];
   assign add_temp_15 = delay_pipeline[15] + delay_pipeline[50];
   assign add_temp_16 = delay_pipeline[16] + delay_pipeline[49];
   assign add_temp_17 = delay_pipeline[17] + delay_pipeline[48];
   assign add_temp_18 = delay_pipeline[18] + delay_pipeline[47];
   assign add_temp_19 = delay_pipeline[19] + delay_pipeline[46];
   assign add_temp_20 = delay_pipeline[20] + delay_pipeline[45];
   assign add_temp_21 = delay_pipeline[21] + delay_pipeline[44];
   assign add_temp_22 = delay_pipeline[22] + delay_pipeline[43];
   assign add_temp_23 = delay_pipeline[23] + delay_pipeline[42];
   assign add_temp_24 = delay_pipeline[24] + delay_pipeline[41];
   assign add_temp_25 = delay_pipeline[25] + delay_pipeline[40];
   assign add_temp_26 = delay_pipeline[26] + delay_pipeline[39];
   assign add_temp_27 = delay_pipeline[27] + delay_pipeline[38];
   assign add_temp_28 = delay_pipeline[28] + delay_pipeline[37];
   assign add_temp_29 = delay_pipeline[29] + delay_pipeline[36];
   assign add_temp_30 = delay_pipeline[30] + delay_pipeline[35];
   assign add_temp_31 = delay_pipeline[31] + delay_pipeline[34];
   assign add_temp_32 = delay_pipeline[32] + delay_pipeline[33];

  assign product = (cur_count == 2'b00) ? add_temp * coeffphase1_66 : 0;
  
  assign product_1 = (cur_count == 2'b00) ? add_temp_1 * coeffphase1_65 : 0;

  assign product_2 = (cur_count == 2'b00) ? add_temp_2 * coeffphase1_64 : 0;

  assign product_3 = (cur_count == 2'b00) ? add_temp_3 * coeffphase1_63 : 0;
  
  assign product_4 = (cur_count == 2'b00) ? add_temp_4 * coeffphase1_62 : 0;
  
  assign product_5 = (cur_count == 2'b00) ? add_temp_5 * coeffphase1_61 : 0;
  
  assign product_6 = (cur_count == 2'b00) ? add_temp_6 * coeffphase1_60 : 0;
  
  assign product_7 = (cur_count == 2'b00) ? add_temp_7 * coeffphase1_59 : 0;
  
  assign product_8 = (cur_count == 2'b00) ? add_temp_8  * coeffphase1_58 : 0;
  
  assign product_9 = (cur_count == 2'b00) ? add_temp_9  * coeffphase1_57 : 0;
  
  assign product_10 = (cur_count == 2'b00) ? add_temp_10 * coeffphase1_56 : 0;
  
  assign product_11 = (cur_count == 2'b00) ? add_temp_11 * coeffphase1_55 : 0;
  
  assign product_12 = (cur_count == 2'b00) ? add_temp_12 * coeffphase1_54 : 0;
  
  assign product_13 = (cur_count == 2'b00) ? add_temp_13 * coeffphase1_53 : 0;
  
  assign product_14 = (cur_count == 2'b00) ? add_temp_14 * coeffphase1_52 : 0;
  
  assign product_15 = (cur_count == 2'b00) ? add_temp_15 * coeffphase1_51 : 0;
  
  assign product_16 = (cur_count == 2'b00) ? add_temp_16 * coeffphase1_50 : 0;
  
  assign product_17 = (cur_count == 2'b00) ? add_temp_17 * coeffphase1_49 : 0;  

  assign product_18 = (cur_count == 2'b00) ? add_temp_18 * coeffphase1_48 : 0;  
															  
  assign product_19 = (cur_count == 2'b00) ? add_temp_19 * coeffphase1_47 : 0;  
															  
  assign product_20 = (cur_count == 2'b00) ? add_temp_20 * coeffphase1_46 : 0;  
															  
  assign product_21 = (cur_count == 2'b00) ? add_temp_21 * coeffphase1_45 : 0;  
															  
  assign product_22 = (cur_count == 2'b00) ? add_temp_22 * coeffphase1_44 : 0;
															  
  assign product_23 = (cur_count == 2'b00) ? add_temp_23 * coeffphase1_43 : 0;  
															  
  assign product_24 = (cur_count == 2'b00) ? add_temp_24 * coeffphase1_42 : 0;  
															  
  assign product_25 = (cur_count == 2'b00) ? add_temp_25 * coeffphase1_41 : 0;  
															  
  assign product_26 = (cur_count == 2'b00) ? add_temp_26 * coeffphase1_40 : 0;  
															  
  assign product_27 = (cur_count == 2'b00) ? add_temp_27 * coeffphase1_39 : 0;  
															  
  assign product_28 = (cur_count == 2'b00) ? add_temp_28 * coeffphase1_38 : 0;  
															  
  assign product_29 = (cur_count == 2'b00) ? add_temp_29 * coeffphase1_37 : 0;
															  
  assign product_30 = (cur_count == 2'b00) ? add_temp_30 * coeffphase1_36 : 0; 
															  
  assign product_31 = (cur_count == 2'b00) ? add_temp_31 * coeffphase1_35 : 0;
															  
  assign product_32 = (cur_count == 2'b00) ? add_temp_32 * coeffphase1_34 : delay_pipeline[32] * coeffphase2_33;


  assign sumvector1[0] = $signed({{6{product[38]}}, product});

  assign sumvector1[1] = $signed({{6{product_1[38]}}, product_1});

  assign sumvector1[2] = $signed({{6{product_2[38]}}, product_2});

  assign sumvector1[3] = $signed({{6{product_3[38]}}, product_3});

  assign sumvector1[4] = $signed({{6{product_4[38]}}, product_4});

  assign sumvector1[5] = $signed({{6{product_5[38]}}, product_5});

  assign sumvector1[6] = $signed({{6{product_6[38]}}, product_6});

  assign sumvector1[7] = $signed({{6{product_7[38]}}, product_7});

  assign sumvector1[8] = $signed({{6{product_8[38]}}, product_8});

  assign sumvector1[9] = $signed({{6{product_9[38]}}, product_9});

  assign sumvector1[10] = $signed({{6{product_10[38]}}, product_10});

  assign sumvector1[11] = $signed({{6{product_11[38]}}, product_11});

  assign sumvector1[12] = $signed({{6{product_12[38]}}, product_12});

  assign sumvector1[13] = $signed({{6{product_13[38]}}, product_13});

  assign sumvector1[14] = $signed({{6{product_14[38]}}, product_14});

  assign sumvector1[15] = $signed({{6{product_15[38]}}, product_15});

  assign sumvector1[16] = $signed({{6{product_16[38]}}, product_16});

  assign sumvector1[17] = $signed({{6{product_17[38]}}, product_17});

  assign sumvector1[18] = $signed({{6{product_18[38]}}, product_18});

  assign sumvector1[19] = $signed({{6{product_19[38]}}, product_19});

  assign sumvector1[20] = $signed({{6{product_20[38]}}, product_20});

  assign sumvector1[21] = $signed({{6{product_21[38]}}, product_21});

  assign sumvector1[22] = $signed({{6{product_22[38]}}, product_22});

  assign sumvector1[23] = $signed({{6{product_23[38]}}, product_23});

  assign sumvector1[24] = $signed({{6{product_24[38]}}, product_24});

  assign sumvector1[25] = $signed({{6{product_25[38]}}, product_25});

  assign sumvector1[26] = $signed({{6{product_26[38]}}, product_26});

  assign sumvector1[27] = $signed({{6{product_27[38]}}, product_27});

  assign sumvector1[28] = $signed({{6{product_28[38]}}, product_28});

  assign sumvector1[29] = $signed({{6{product_29[38]}}, product_29});

  assign sumvector1[30] = $signed({{6{product_30[38]}}, product_30});

  assign sumvector1[31] = $signed({{6{product_31[38]}}, product_31});

  assign sumvector1[32] = $signed({{6{product_32[38]}}, product_32});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
        sumdelay_pipeline1[9] <= 0;
        sumdelay_pipeline1[10] <= 0;
        sumdelay_pipeline1[11] <= 0;
        sumdelay_pipeline1[12] <= 0;
        sumdelay_pipeline1[13] <= 0;
        sumdelay_pipeline1[14] <= 0;
        sumdelay_pipeline1[15] <= 0;
        sumdelay_pipeline1[16] <= 0;
        sumdelay_pipeline1[17] <= 0;
        sumdelay_pipeline1[18] <= 0;
        sumdelay_pipeline1[19] <= 0;
        sumdelay_pipeline1[20] <= 0;
        sumdelay_pipeline1[21] <= 0;
        sumdelay_pipeline1[22] <= 0;
        sumdelay_pipeline1[23] <= 0;
        sumdelay_pipeline1[24] <= 0;
        sumdelay_pipeline1[25] <= 0;
        sumdelay_pipeline1[26] <= 0;
        sumdelay_pipeline1[27] <= 0;
        sumdelay_pipeline1[28] <= 0;
        sumdelay_pipeline1[29] <= 0;
        sumdelay_pipeline1[30] <= 0;
        sumdelay_pipeline1[31] <= 0;
        sumdelay_pipeline1[32] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
          sumdelay_pipeline1[9] <= sumvector1[9];
          sumdelay_pipeline1[10] <= sumvector1[10];
          sumdelay_pipeline1[11] <= sumvector1[11];
          sumdelay_pipeline1[12] <= sumvector1[12];
          sumdelay_pipeline1[13] <= sumvector1[13];
          sumdelay_pipeline1[14] <= sumvector1[14];
          sumdelay_pipeline1[15] <= sumvector1[15];
          sumdelay_pipeline1[16] <= sumvector1[16];
          sumdelay_pipeline1[17] <= sumvector1[17];
          sumdelay_pipeline1[18] <= sumvector1[18];
          sumdelay_pipeline1[19] <= sumvector1[19];
          sumdelay_pipeline1[20] <= sumvector1[20];
          sumdelay_pipeline1[21] <= sumvector1[21];
          sumdelay_pipeline1[22] <= sumvector1[22];
          sumdelay_pipeline1[23] <= sumvector1[23];
          sumdelay_pipeline1[24] <= sumvector1[24];
          sumdelay_pipeline1[25] <= sumvector1[25];
          sumdelay_pipeline1[26] <= sumvector1[26];
          sumdelay_pipeline1[27] <= sumvector1[27];
          sumdelay_pipeline1[28] <= sumvector1[28];
          sumdelay_pipeline1[29] <= sumvector1[29];
          sumdelay_pipeline1[30] <= sumvector1[30];
          sumdelay_pipeline1[31] <= sumvector1[31];
          sumdelay_pipeline1[32] <= sumvector1[32];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_66 = sumdelay_pipeline1[0];
  assign add_signext_67 = sumdelay_pipeline1[1];
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sumvector2[0] = ((add_temp_33[45] == 1'b0 & add_temp_33[44] != 1'b0) || (add_temp_33[45] == 1'b0 && add_temp_33[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_33[45] == 1'b1 && add_temp_33[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_33[44:0];

  assign add_signext_68 = sumdelay_pipeline1[2];
  assign add_signext_69 = sumdelay_pipeline1[3];
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sumvector2[1] = ((add_temp_34[45] == 1'b0 & add_temp_34[44] != 1'b0) || (add_temp_34[45] == 1'b0 && add_temp_34[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_34[45] == 1'b1 && add_temp_34[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_34[44:0];

  assign add_signext_70 = sumdelay_pipeline1[4];
  assign add_signext_71 = sumdelay_pipeline1[5];
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sumvector2[2] = ((add_temp_35[45] == 1'b0 & add_temp_35[44] != 1'b0) || (add_temp_35[45] == 1'b0 && add_temp_35[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_35[45] == 1'b1 && add_temp_35[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_35[44:0];

  assign add_signext_72 = sumdelay_pipeline1[6];
  assign add_signext_73 = sumdelay_pipeline1[7];
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sumvector2[3] = ((add_temp_36[45] == 1'b0 & add_temp_36[44] != 1'b0) || (add_temp_36[45] == 1'b0 && add_temp_36[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_36[45] == 1'b1 && add_temp_36[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_36[44:0];

  assign add_signext_74 = sumdelay_pipeline1[8];
  assign add_signext_75 = sumdelay_pipeline1[9];
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sumvector2[4] = ((add_temp_37[45] == 1'b0 & add_temp_37[44] != 1'b0) || (add_temp_37[45] == 1'b0 && add_temp_37[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_37[45] == 1'b1 && add_temp_37[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_37[44:0];

  assign add_signext_76 = sumdelay_pipeline1[10];
  assign add_signext_77 = sumdelay_pipeline1[11];
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sumvector2[5] = ((add_temp_38[45] == 1'b0 & add_temp_38[44] != 1'b0) || (add_temp_38[45] == 1'b0 && add_temp_38[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_38[45] == 1'b1 && add_temp_38[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_38[44:0];

  assign add_signext_78 = sumdelay_pipeline1[12];
  assign add_signext_79 = sumdelay_pipeline1[13];
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sumvector2[6] = ((add_temp_39[45] == 1'b0 & add_temp_39[44] != 1'b0) || (add_temp_39[45] == 1'b0 && add_temp_39[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_39[45] == 1'b1 && add_temp_39[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_39[44:0];

  assign add_signext_80 = sumdelay_pipeline1[14];
  assign add_signext_81 = sumdelay_pipeline1[15];
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sumvector2[7] = ((add_temp_40[45] == 1'b0 & add_temp_40[44] != 1'b0) || (add_temp_40[45] == 1'b0 && add_temp_40[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_40[45] == 1'b1 && add_temp_40[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_40[44:0];

  assign add_signext_82 = sumdelay_pipeline1[16];
  assign add_signext_83 = sumdelay_pipeline1[17];
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sumvector2[8] = ((add_temp_41[45] == 1'b0 & add_temp_41[44] != 1'b0) || (add_temp_41[45] == 1'b0 && add_temp_41[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_41[45] == 1'b1 && add_temp_41[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_41[44:0];

  assign add_signext_84 = sumdelay_pipeline1[18];
  assign add_signext_85 = sumdelay_pipeline1[19];
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sumvector2[9] = ((add_temp_42[45] == 1'b0 & add_temp_42[44] != 1'b0) || (add_temp_42[45] == 1'b0 && add_temp_42[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_42[45] == 1'b1 && add_temp_42[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_42[44:0];

  assign add_signext_86 = sumdelay_pipeline1[20];
  assign add_signext_87 = sumdelay_pipeline1[21];
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sumvector2[10] = ((add_temp_43[45] == 1'b0 & add_temp_43[44] != 1'b0) || (add_temp_43[45] == 1'b0 && add_temp_43[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_43[45] == 1'b1 && add_temp_43[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_43[44:0];

  assign add_signext_88 = sumdelay_pipeline1[22];
  assign add_signext_89 = sumdelay_pipeline1[23];
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sumvector2[11] = ((add_temp_44[45] == 1'b0 & add_temp_44[44] != 1'b0) || (add_temp_44[45] == 1'b0 && add_temp_44[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_44[45] == 1'b1 && add_temp_44[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_44[44:0];

  assign add_signext_90 = sumdelay_pipeline1[24];
  assign add_signext_91 = sumdelay_pipeline1[25];
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sumvector2[12] = ((add_temp_45[45] == 1'b0 & add_temp_45[44] != 1'b0) || (add_temp_45[45] == 1'b0 && add_temp_45[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_45[45] == 1'b1 && add_temp_45[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_45[44:0];

  assign add_signext_92 = sumdelay_pipeline1[26];
  assign add_signext_93 = sumdelay_pipeline1[27];
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sumvector2[13] = ((add_temp_46[45] == 1'b0 & add_temp_46[44] != 1'b0) || (add_temp_46[45] == 1'b0 && add_temp_46[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_46[45] == 1'b1 && add_temp_46[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_46[44:0];

  assign add_signext_94 = sumdelay_pipeline1[28];
  assign add_signext_95 = sumdelay_pipeline1[29];
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sumvector2[14] = ((add_temp_47[45] == 1'b0 & add_temp_47[44] != 1'b0) || (add_temp_47[45] == 1'b0 && add_temp_47[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_47[45] == 1'b1 && add_temp_47[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_47[44:0];

  assign add_signext_96 = sumdelay_pipeline1[30];
  assign add_signext_97 = sumdelay_pipeline1[31];
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sumvector2[15] = ((add_temp_48[45] == 1'b0 & add_temp_48[44] != 1'b0) || (add_temp_48[45] == 1'b0 && add_temp_48[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_48[45] == 1'b1 && add_temp_48[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_48[44:0];

  assign sumvector2[16] = sumdelay_pipeline1[32];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
        sumdelay_pipeline2[5] <= 0;
        sumdelay_pipeline2[6] <= 0;
        sumdelay_pipeline2[7] <= 0;
        sumdelay_pipeline2[8] <= 0;
        sumdelay_pipeline2[9] <= 0;
        sumdelay_pipeline2[10] <= 0;
        sumdelay_pipeline2[11] <= 0;
        sumdelay_pipeline2[12] <= 0;
        sumdelay_pipeline2[13] <= 0;
        sumdelay_pipeline2[14] <= 0;
        sumdelay_pipeline2[15] <= 0;
        sumdelay_pipeline2[16] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
          sumdelay_pipeline2[5] <= sumvector2[5];
          sumdelay_pipeline2[6] <= sumvector2[6];
          sumdelay_pipeline2[7] <= sumvector2[7];
          sumdelay_pipeline2[8] <= sumvector2[8];
          sumdelay_pipeline2[9] <= sumvector2[9];
          sumdelay_pipeline2[10] <= sumvector2[10];
          sumdelay_pipeline2[11] <= sumvector2[11];
          sumdelay_pipeline2[12] <= sumvector2[12];
          sumdelay_pipeline2[13] <= sumvector2[13];
          sumdelay_pipeline2[14] <= sumvector2[14];
          sumdelay_pipeline2[15] <= sumvector2[15];
          sumdelay_pipeline2[16] <= sumvector2[16];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_98 = sumdelay_pipeline2[0];
  assign add_signext_99 = sumdelay_pipeline2[1];
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sumvector3[0] = ((add_temp_49[45] == 1'b0 & add_temp_49[44] != 1'b0) || (add_temp_49[45] == 1'b0 && add_temp_49[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_49[45] == 1'b1 && add_temp_49[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_49[44:0];

  assign add_signext_100 = sumdelay_pipeline2[2];
  assign add_signext_101 = sumdelay_pipeline2[3];
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sumvector3[1] = ((add_temp_50[45] == 1'b0 & add_temp_50[44] != 1'b0) || (add_temp_50[45] == 1'b0 && add_temp_50[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_50[45] == 1'b1 && add_temp_50[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_50[44:0];

  assign add_signext_102 = sumdelay_pipeline2[4];
  assign add_signext_103 = sumdelay_pipeline2[5];
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sumvector3[2] = ((add_temp_51[45] == 1'b0 & add_temp_51[44] != 1'b0) || (add_temp_51[45] == 1'b0 && add_temp_51[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_51[45] == 1'b1 && add_temp_51[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_51[44:0];

  assign add_signext_104 = sumdelay_pipeline2[6];
  assign add_signext_105 = sumdelay_pipeline2[7];
  assign add_temp_52 = add_signext_104 + add_signext_105;
  assign sumvector3[3] = ((add_temp_52[45] == 1'b0 & add_temp_52[44] != 1'b0) || (add_temp_52[45] == 1'b0 && add_temp_52[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_52[45] == 1'b1 && add_temp_52[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_52[44:0];

  assign add_signext_106 = sumdelay_pipeline2[8];
  assign add_signext_107 = sumdelay_pipeline2[9];
  assign add_temp_53 = add_signext_106 + add_signext_107;
  assign sumvector3[4] = ((add_temp_53[45] == 1'b0 & add_temp_53[44] != 1'b0) || (add_temp_53[45] == 1'b0 && add_temp_53[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_53[45] == 1'b1 && add_temp_53[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_53[44:0];

  assign add_signext_108 = sumdelay_pipeline2[10];
  assign add_signext_109 = sumdelay_pipeline2[11];
  assign add_temp_54 = add_signext_108 + add_signext_109;
  assign sumvector3[5] = ((add_temp_54[45] == 1'b0 & add_temp_54[44] != 1'b0) || (add_temp_54[45] == 1'b0 && add_temp_54[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_54[45] == 1'b1 && add_temp_54[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_54[44:0];

  assign add_signext_110 = sumdelay_pipeline2[12];
  assign add_signext_111 = sumdelay_pipeline2[13];
  assign add_temp_55 = add_signext_110 + add_signext_111;
  assign sumvector3[6] = ((add_temp_55[45] == 1'b0 & add_temp_55[44] != 1'b0) || (add_temp_55[45] == 1'b0 && add_temp_55[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_55[45] == 1'b1 && add_temp_55[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_55[44:0];

  assign add_signext_112 = sumdelay_pipeline2[14];
  assign add_signext_113 = sumdelay_pipeline2[15];
  assign add_temp_56 = add_signext_112 + add_signext_113;
  assign sumvector3[7] = ((add_temp_56[45] == 1'b0 & add_temp_56[44] != 1'b0) || (add_temp_56[45] == 1'b0 && add_temp_56[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_56[45] == 1'b1 && add_temp_56[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_56[44:0];

  assign sumvector3[8] = sumdelay_pipeline2[16];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
        sumdelay_pipeline3[3] <= 0;
        sumdelay_pipeline3[4] <= 0;
        sumdelay_pipeline3[5] <= 0;
        sumdelay_pipeline3[6] <= 0;
        sumdelay_pipeline3[7] <= 0;
        sumdelay_pipeline3[8] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
          sumdelay_pipeline3[3] <= sumvector3[3];
          sumdelay_pipeline3[4] <= sumvector3[4];
          sumdelay_pipeline3[5] <= sumvector3[5];
          sumdelay_pipeline3[6] <= sumvector3[6];
          sumdelay_pipeline3[7] <= sumvector3[7];
          sumdelay_pipeline3[8] <= sumvector3[8];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_114 = sumdelay_pipeline3[0];
  assign add_signext_115 = sumdelay_pipeline3[1];
  assign add_temp_57 = add_signext_114 + add_signext_115;
  assign sumvector4[0] = ((add_temp_57[45] == 1'b0 & add_temp_57[44] != 1'b0) || (add_temp_57[45] == 1'b0 && add_temp_57[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_57[45] == 1'b1 && add_temp_57[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_57[44:0];

  assign add_signext_116 = sumdelay_pipeline3[2];
  assign add_signext_117 = sumdelay_pipeline3[3];
  assign add_temp_58 = add_signext_116 + add_signext_117;
  assign sumvector4[1] = ((add_temp_58[45] == 1'b0 & add_temp_58[44] != 1'b0) || (add_temp_58[45] == 1'b0 && add_temp_58[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_58[45] == 1'b1 && add_temp_58[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_58[44:0];

  assign add_signext_118 = sumdelay_pipeline3[4];
  assign add_signext_119 = sumdelay_pipeline3[5];
  assign add_temp_59 = add_signext_118 + add_signext_119;
  assign sumvector4[2] = ((add_temp_59[45] == 1'b0 & add_temp_59[44] != 1'b0) || (add_temp_59[45] == 1'b0 && add_temp_59[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_59[45] == 1'b1 && add_temp_59[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_59[44:0];

  assign add_signext_120 = sumdelay_pipeline3[6];
  assign add_signext_121 = sumdelay_pipeline3[7];
  assign add_temp_60 = add_signext_120 + add_signext_121;
  assign sumvector4[3] = ((add_temp_60[45] == 1'b0 & add_temp_60[44] != 1'b0) || (add_temp_60[45] == 1'b0 && add_temp_60[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_60[45] == 1'b1 && add_temp_60[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_60[44:0];

  assign sumvector4[4] = sumdelay_pipeline3[8];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b1) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
        sumdelay_pipeline4[2] <= 0;
        sumdelay_pipeline4[3] <= 0;
        sumdelay_pipeline4[4] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
          sumdelay_pipeline4[2] <= sumvector4[2];
          sumdelay_pipeline4[3] <= sumvector4[3];
          sumdelay_pipeline4[4] <= sumvector4[4];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_122 = sumdelay_pipeline4[0];
  assign add_signext_123 = sumdelay_pipeline4[1];
  assign add_temp_61 = add_signext_122 + add_signext_123;
  assign sumvector5[0] = ((add_temp_61[45] == 1'b0 & add_temp_61[44] != 1'b0) || (add_temp_61[45] == 1'b0 && add_temp_61[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_61[45] == 1'b1 && add_temp_61[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_61[44:0];

  assign add_signext_124 = sumdelay_pipeline4[2];
  assign add_signext_125 = sumdelay_pipeline4[3];
  assign add_temp_62 = add_signext_124 + add_signext_125;
  assign sumvector5[1] = ((add_temp_62[45] == 1'b0 & add_temp_62[44] != 1'b0) || (add_temp_62[45] == 1'b0 && add_temp_62[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_62[45] == 1'b1 && add_temp_62[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_62[44:0];

  assign sumvector5[2] = sumdelay_pipeline4[4];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process5
      if (reset == 1'b1) begin
        sumdelay_pipeline5[0] <= 0;
        sumdelay_pipeline5[1] <= 0;
        sumdelay_pipeline5[2] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline5[0] <= sumvector5[0];
          sumdelay_pipeline5[1] <= sumvector5[1];
          sumdelay_pipeline5[2] <= sumvector5[2];
        end
      end
    end // sumdelay_pipeline_process5

  assign add_signext_126 = sumdelay_pipeline5[0];
  assign add_signext_127 = sumdelay_pipeline5[1];
  assign add_temp_63 = add_signext_126 + add_signext_127;
  assign sumvector6[0] = ((add_temp_63[45] == 1'b0 & add_temp_63[44] != 1'b0) || (add_temp_63[45] == 1'b0 && add_temp_63[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_63[45] == 1'b1 && add_temp_63[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_63[44:0];

  assign sumvector6[1] = sumdelay_pipeline5[2];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process6
      if (reset == 1'b1) begin
        sumdelay_pipeline6[0] <= 0;
        sumdelay_pipeline6[1] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline6[0] <= sumvector6[0];
          sumdelay_pipeline6[1] <= sumvector6[1];
        end
      end
    end // sumdelay_pipeline_process6

  assign add_signext_128 = sumdelay_pipeline6[0];
  assign add_signext_129 = sumdelay_pipeline6[1];
  assign add_temp_64 = add_signext_128 + add_signext_129;
  assign sum7 = ((add_temp_64[45] == 1'b0 & add_temp_64[44] != 1'b0) || (add_temp_64[45] == 1'b0 && add_temp_64[44:0] == 45'b011111111111111111111111111111111111111111111) // special case0
) ? 45'b011111111111111111111111111111111111111111111 : 
      (add_temp_64[45] == 1'b1 && add_temp_64[44] != 1'b1) ? 45'b100000000000000000000000000000000000000000000 : add_temp_64[44:0];

  assign output_typeconvert = ((sum7[44] == 1'b0 & sum7[43:40] != 4'b0000) || (sum7[44] == 1'b0 && sum7[40:20] == 21'b011111111111111111111) // special case0
) ? 21'b011111111111111111111 : 
      (sum7[44] == 1'b1 && sum7[43:40] != 4'b1111) ? 21'b100000000000000000000 : (sum7[40:0] + {sum7[20], {19{~sum7[20]}}})>>>20;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign ce_out = phase_1;
  assign filter_out = output_register;
endmodule  // halfBandFirst
